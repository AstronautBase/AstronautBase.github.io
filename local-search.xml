<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>互联网计算-01计算机网络和因特网</title>
    <link href="/2025/02/26/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97-01%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/"/>
    <url>/2025/02/26/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97-01%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h2 id="基本概念和问题"><a href="#基本概念和问题" class="headerlink" title="基本概念和问题"></a>基本概念和问题</h2><h3 id="因特网的概念"><a href="#因特网的概念" class="headerlink" title="因特网的概念"></a>因特网的概念</h3><h4 id="具体构成"><a href="#具体构成" class="headerlink" title="具体构成"></a>具体构成</h4><ul><li>主机 host &#x2F; 端系统 end system</li><li>通信链路 communication link<ul><li>链路的传输速率 transmission rate 以比特&#x2F;秒 bit&#x2F;s bps 度量</li><li>当一台端系统要向另一台端系统发送数据时，发送端系统将数据分段，并为每段加上首部字节。由此形成的信息包就是分组 packet。</li></ul></li><li>分组交换机 packet switch<ul><li>路由器 router 用于网络核心</li><li>链路层交换机 link-layer switch 用于接入网</li></ul></li></ul><p><strong>TCP&#x2F;IP</strong>：端系统、分组交换机和其它因特网部件都要运行多个协议 protocol，这些协议控制因特网中信息的接收和发送。TCP (Transmission Control Protocol 传输控制协议) 和 IP (Internet Protocol 网际协议) 是因特网中最为重要的两个协议，因特网的主要协议统称为 TCP&#x2F;IP。</p><h4 id="协议-Protocol"><a href="#协议-Protocol" class="headerlink" title="协议 Protocol"></a>协议 Protocol</h4><p><strong>定义：</strong> 在两个或多个通信实体之间交换的报文的格式和顺序，以及报文的发送&#x2F;接收或其它事件所采取的操作。</p><h3 id="网络边缘-Network-Edge"><a href="#网络边缘-Network-Edge" class="headerlink" title="网络边缘 Network Edge"></a>网络边缘 Network Edge</h3><p>端系统——也称为主机 host</p><ul><li>客户 client</li><li>服务器 server</li></ul><h4 id="接入网-Access-Networks"><a href="#接入网-Access-Networks" class="headerlink" title="接入网 Access Networks"></a>接入网 Access Networks</h4><p>——将端系统物理连接到其边缘路由器 edge router 的网络。是端系统到任何其它远程端系统的路径上的第一台路由器。</p><ol><li>家庭接入：DSL、电缆、FTTH 和 5G 固定式无线<ul><li>DSL - Digital Subscirber Line 数字用户线</li><li>HFC - Hybrid Fiber Coax 混合光纤同轴</li><li>FTTH - Fiber To The Home 光纤到户</li></ul></li><li>企业（和家庭）接入：以太网和 WIFI</li><li>广域无线接入：3G、LTE 4G 和 5G</li></ol><h4 id="物理媒介"><a href="#物理媒介" class="headerlink" title="物理媒介"></a>物理媒介</h4><ul><li>导引型媒介：电波沿着固体媒介前行，如光缆、双绞铜线或同轴电缆</li><li>非导引型媒介：电波在空气或外层空间中传播，例如在无线局域网或数字卫星频道中传播</li></ul><h3 id="网络核心-The-Network-Core"><a href="#网络核心-The-Network-Core" class="headerlink" title="网络核心 The Network Core"></a>网络核心 The Network Core</h3><p><strong>报文 message:</strong> 包含该应用的设计者需要的任何东西。可以执行一种控制功能，也可以包含数据。为了从源端系统向目的端系统发送一个报文，源将长报文划分为较小的数据块，称为<strong>分组 packet</strong>。</p><h4 id="电路交换-circuit-switching"><a href="#电路交换-circuit-switching" class="headerlink" title="电路交换 circuit switching"></a>电路交换 circuit switching</h4><p>在端系统间通信会话期间，预留了端系统间沿路径通信所需要的资源（缓存，链路传输速率）。<br><img src="/2025/02/26/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97-01%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/2025022638.png"></p><ol><li><strong>频分复用</strong> Frequency-Division Multiplexing FDM: 链路的频谱由跨越链路创建的所有连接共享。在连接期间链路为每条连接专设一个频段，该频段的宽度称为带宽。</li><li><strong>时分复用</strong> Time-Division Multiplexing TDM: 时间被划分为固定时段的帧，并且每个帧又被划分为固定数量的时隙。当网络跨越一条链路创建一条连接时，网路在每个帧中为该连接指定一个时隙。这些时隙专门由该连接单独使用。</li></ol><p>优缺点：<br><img src="/2025/02/26/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97-01%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/2025022670.png"></p><h4 id="分组交换-packet-switching"><a href="#分组交换-packet-switching" class="headerlink" title="分组交换 packet switching"></a>分组交换 packet switching</h4><p><strong>存储转发传输</strong> store-and-forward transmission: 在交换机开始向输出链路传输该分组的第一个比特之前，必须接收到整个分组。<br><img src="/2025/02/26/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97-01%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/2025022618.png"><br>排队时延&#x2F;丢失：<br><img src="/2025/02/26/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97-01%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/2025022686.png"><br>优缺点：<br><img src="/2025/02/26/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97-01%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/2025022641.png"></p><h2 id="Network-Performance"><a href="#Network-Performance" class="headerlink" title="Network Performance"></a>Network Performance</h2><h3 id="时延类型"><a href="#时延类型" class="headerlink" title="时延类型"></a>时延类型</h3><ol><li>传输时延 Transmission delay: 用 L 表示分组长度，用 R 表示从路由器 A 到路由器 B 的链路传输速率，传输时延时 L&#x2F;R。</li><li>传播时延 Propagation delay: 从链路的起点到路由器 B 传播所需要的时间。</li><li>排队时延 Queuing delay: 在队列中，当分组在链路上等待传输时，将经受排队时延。</li><li>处理时延 Processing delay: 检查分组首部&#x2F;决定该分组导向何处等所需的时间。</li></ol><h3 id="端到端时延"><a href="#端到端时延" class="headerlink" title="端到端时延"></a>端到端时延</h3><p><img src="/2025/02/26/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97-01%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/2025022692.png"></p><h2 id="协议层次和服务模型"><a href="#协议层次和服务模型" class="headerlink" title="协议层次和服务模型"></a>协议层次和服务模型</h2><h3 id="协议分层"><a href="#协议分层" class="headerlink" title="协议分层"></a>协议分层</h3><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>网络应用程序及它们的应用层协议存留的地方。<br>应用层协议分布在多个端系统上，而一个端系统中的应用程序使用协议与另一个端系统中的应用程序交换信息分组，这种位于应用层的信息分组称为<strong>报文 message</strong>。</p><h4 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h4><p>在应用程序端点之间传送应用层报文。<br>把运输层的分组称为<strong>报文段 segment</strong>。</p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>负责将称为<strong>数据报 datagram</strong> 的网络层分组从一台主机移动到另一台主机。</p><h4 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h4><p>在每个节点，网络层将数据报下传给链路层，链路层沿着路径将数据报传递给下一个节点。在下一个节点链路层将数据报上传给网络层。<br>链路层的分组称为<strong>帧 frame</strong>。</p><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><p>链路层将整个帧从一个网络元素移动到邻近的网络元素，而物理层是将帧中的一个个比特从一个节点移动到下一个节点。</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p><img src="/2025/02/26/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97-01%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/2025022640.png"><br><img src="/2025/02/26/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97-01%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/2025022651.png"></p>]]></content>
    
    
    <categories>
      
      <category>2025春-互联网计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互联网计算-02应用层</title>
    <link href="/2025/02/25/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97-02%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <url>/2025/02/25/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97-02%E5%BA%94%E7%94%A8%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h2 id="网络应用原理"><a href="#网络应用原理" class="headerlink" title="网络应用原理"></a>网络应用原理</h2><h3 id="网络应用体系结构"><a href="#网络应用体系结构" class="headerlink" title="网络应用体系结构"></a>网络应用体系结构</h3><h4 id="客户-服务器体系结构-CS-client-server-achitecture"><a href="#客户-服务器体系结构-CS-client-server-achitecture" class="headerlink" title="客户-服务器体系结构 CS client-server achitecture"></a>客户-服务器体系结构 CS client-server achitecture</h4><ul><li>有一个总是打开的主机，称为服务器，它服务于来自许多其它称为客户的主机的请求。</li><li>客户相互不直接通信</li><li>具有固定的、周知的地址，称为 <strong>IP 地址</strong>；客户总是能够通过向该服务器的 IP 地址发送分组来与其联系。</li><li>例：Web&#x2F;FTP&#x2F;Telnet&#x2F;电子邮件</li></ul><h4 id="P2P-体系结构-P2P-architecture"><a href="#P2P-体系结构-P2P-architecture" class="headerlink" title="P2P 体系结构 P2P architecture"></a>P2P 体系结构 P2P architecture</h4><ul><li>对位于数据中心的专用服务器有最小的（或者没有）依赖。</li><li>应用程序在间断连接的主机对之间直接通信，这些主机称为对等方。</li><li>例：文件共享应用 BitTorrent</li><li><strong>自扩展性</strong> self-scalability：尽管每个对等方都由于请求文件产生工作负载，但每个对等方通过向其它对等方文件也为系统增加服务能力。</li><li>成本效率：不需要庞大的服务器基础设施和服务带宽<br>例：及时通讯</li><li>CS: User registers its IP address with central server when it comes online</li><li>P2P: User contacts central server to find IP address of parties</li></ul><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><p><strong>进程：</strong> 进行通信的实际上是进程 process 而不是程序，一个进程可以被认为是运行在端系统中的一个程序。</p><ul><li>当多个进程运行在相同的端系统上时，它们使用进程间通信机制相互通信。</li><li>在两个不同端系统上的进程，通过跨越计算机网络交换报文 message 而相互通信</li></ul><p><strong>套接字 socket：</strong> 进程通过一个称为套接字的软件结构向网络发送报文和从网络接收报文。由于套接字也是建立网络应用程序的可编程接口，也被称为应用编程接口 Application Programming Interface API</p><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><h3 id="Web-和-HTTP"><a href="#Web-和-HTTP" class="headerlink" title="Web 和 HTTP"></a>Web 和 HTTP</h3><h4 id="HTTP-概述"><a href="#HTTP-概述" class="headerlink" title="HTTP 概述"></a>HTTP 概述</h4><p><strong>HTTP</strong> (HyperText Transfer Protocol 超文本传输协议)：Web 的应用层协议，是 Web 的核心。<br>URL 格式：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;protocol&gt;<span class="hljs-symbol">://&lt;host&gt;</span><span class="hljs-symbol">:&lt;port&gt;/&lt;path&gt;<span class="hljs-string">?q</span>uery_string</span><br></code></pre></td></tr></table></figure><ul><li>protocol: method for transmission or interpretation of the object</li><li>host: DNS name or IP address of the host where object resides</li><li>path: pathname of the file that contains the object</li><li>query_string: name&#x2F;value pairs sent to app on the server</li></ul><p>HTTP 连接过程 —— 三次握手：</p><ul><li>客户向服务器发送一个小 TCP 报文段</li><li>服务器用一个小 TCP 报文段做出确认和响应</li><li>客户向服务器返回确认</li></ul><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p><strong>cookie:</strong> HTTP 服务器是无状态的，而cookie 允许站点对用户进行跟踪<br>4 个组件：</p><ul><li>在 HTTP 响应报文中的一个 cookie 首部行</li><li>在 HTTP 请求报文中的一个 cookie 首部行</li><li>在用户端系统中保留的一个 cookie 文件，并由用户的浏览器进行管理</li><li>位于 Web 站点的一个后端数据库</li></ul><h4 id="持续-非持续连接"><a href="#持续-非持续连接" class="headerlink" title="持续&#x2F;非持续连接"></a>持续&#x2F;非持续连接</h4><p><strong>RTT:</strong> 往返时间 Round-Trip Time 指一个短分组从客户到服务器然后再返回客户所花费的时间。包括分组传播时延、分组在中间路由器和交换机上的排队时延以及分组处理时延<br><em>非持续连接</em>：</p><ul><li>必须为每一个请求的对象建立和维护一个全新的连接。对于每个这样的连接，在客户和服务器中都要分配 TCP 的缓冲区和保持 TCP 变量，给服务器带来严重负担。</li><li>每一个对象经受两倍 RTT 的交付时延，即一个 RTT 用于创建 TCP，另一个 RTT 用于请求和接收一个对象。</li></ul><p>持续连接：服务器在发送响应后保持该 TCP 连接打开。在相同的客户与服务器之间，后续的请求和响应报文能够通过相同的连接进行传送。</p><h4 id="Web缓存"><a href="#Web缓存" class="headerlink" title="Web缓存"></a>Web缓存</h4><p>Web 缓存器 - 代理服务器 proxy server：能够代表初始 Web 服务器来满足 HTTP 请求的网络实体。有自己的磁盘存储空间，并在存储空间中保存最近请求过的对象的副本。<br><strong>条件 GET</strong> conditional GET<br>条件 GET 请求报文：HTTP 请求报文使用 GET 方法，并且请求报文中包含一个”If-modified-since: “首部行</p><h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><p>用于从发送方的邮件服务器发送报文到接收方的邮件服务器<br>传送方式：</p><ol><li>客户 SMTP（运行在发送邮件服务器主机上）在 25 号端口建立一个到服务器 SMTP（运行在接收邮件服务器主机上）的 TCP 连接。</li><li>如果服务器没有开机，客户会在稍后继续尝试连接。一旦连接建立，服务器和客户执行某些应用层的握手。</li><li>在SMTP 握手的阶段，SMTP 客户只是发送方的邮件地址（产生报文的人）和接收方的邮件地址。一旦该 SMTP 客户和服务器彼此介绍后，客户发送该报文。</li><li>SMTP 能依赖 TCP 提供可靠数据传输无差错地将邮件投递到接收服务器。该客户如果有另外的报文要发送到该服务器，就在该相同的 TCP 连接上重复这种处理；否则它指示 TCP 关闭连接。</li></ol><h3 id="DNS-Domain-Name-Service"><a href="#DNS-Domain-Name-Service" class="headerlink" title="DNS Domain Name Service"></a>DNS Domain Name Service</h3><p>识别主机的两种方式:</p><ul><li>主机名</li><li>IP 地址<br>——主机名到 IP 地址转换的目录服务：DNS 的主要任务</li></ul><p>DNS：</p><ul><li>一个由分层的 DNS 服务器实现的分布式数据库</li><li>一个使得主机能够查询分布式数据库的应用层协议</li></ul><p>目标：</p><ul><li>独特性：没有命名冲突</li><li>可扩展性 Many names and frequent updates (secondary)</li><li>分布式、自主管理<ul><li>Ability to update my own (machine’s) names</li><li>Don’t have to track everybody’s updates</li></ul></li><li>Highly available</li><li>Lookups are fast</li><li>Perfect consistency is a non-goal</li></ul><p>How?</p><ul><li>Partition the namespace</li><li>Distribute administration of each partition 分配每个分区的管理<ul><li>Autonomy to update my own (machine’s) names</li><li>Don’t have to track everybody’s updates</li></ul></li><li>Distribute name resolution for each partition 为每个分区分配名称解析</li></ul><p>核心思想：层次结构 <strong>Hierarchy</strong><br>Three intertwined hierarchies</p><ul><li>Hierarchical namespace</li><li>Hierarchical administered</li><li>(Distributed) hierarchy of servers</li></ul><p><img src="/2025/02/25/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97-02%E5%BA%94%E7%94%A8%E5%B1%82/2025022587.png"><br><img src="/2025/02/25/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97-02%E5%BA%94%E7%94%A8%E5%B1%82/2025022532.png"></p><p>DNS 服务器的层次结构：</p><ul><li>根服务器：13 root name “serves” worldwide，还有超多 1000 台的副本。根服务器提供 TLD 服务器的 IP 地址</li><li>顶级域 (TLD Top-Level Domain) DNS 服务器：对每个顶级域和所有国家的顶级域都有 TLD 服务器。TLD 服务器提供权威 DNS 服务器的 IP 地址。</li><li>权威服务器：在因特网上具有公共可访问主机（如 Web 服务器和邮件服务器）的每个组织机构必须提供公共可访问的 DNS 记录，这些记录将这些主机的名字映射为 IP 地址。一个组织的权威 DNS 服务器收藏了这些 DNS 记录。</li></ul>]]></content>
    
    
    <categories>
      
      <category>2025春-互联网计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
